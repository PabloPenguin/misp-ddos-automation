name: Refresh MISP Dashboard Data

on:
  schedule:
    # Run every 30 minutes during business hours (8 AM - 6 PM UTC)
    - cron: '*/30 8-18 * * 1-5'
    # Run every 2 hours outside business hours and weekends  
    - cron: '0 */2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths:
      - 'cli/**'
      - '.github/workflows/refresh-misp-data.yml'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  refresh-data:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install CLI dependencies
      run: |
        cd cli
        pip install -r requirements.txt
        
    - name: Verify MISP connection (skip on GitHub Actions)
      run: |
        echo "MISP connection test skipped in GitHub Actions (Tailscale private network)"
        echo "Connection would be tested against: ${{ secrets.MISP_URL }}"
        echo "To enable, connect GitHub Actions to Tailscale network"
      # Uncomment below when MISP is accessible from GitHub Actions
      # env:
      #   MISP_URL: ${{ secrets.MISP_URL }}
      #   MISP_API_KEY: ${{ secrets.MISP_API_KEY }}
      #   MISP_VERIFY_SSL: ${{ secrets.MISP_VERIFY_SSL }}
      # run: |
      #   cd cli
      #   python src/misp_client.py --test-connection
        
    - name: Create demo data (GitHub Actions placeholder)
      run: |
        mkdir -p webapp/frontend/public/data
        echo '{"events": [], "attributes": [], "organizations": [], "tags": [], "summary": {"totalEvents": 0, "totalAttributes": 0, "totalOrganizations": 0, "totalTags": 0}, "lastUpdated": "'$TIMESTAMP'", "source": "github-actions-demo"}' > webapp/frontend/public/data/dashboard-data.json
        echo "Created demo data file for GitHub Pages deployment"
      # Future: Replace with actual MISP data fetching when accessible  
      # env:
      #   MISP_URL: ${{ secrets.MISP_URL }}
      #   MISP_API_KEY: ${{ secrets.MISP_API_KEY }}
      #   MISP_VERIFY_SSL: ${{ secrets.MISP_VERIFY_SSL }}
      # run: |
      #   cd cli
      #   python src/misp_client.py --fetch-dashboard-data --output ../webapp/frontend/public/data/dashboard-data.json
        
    - name: Generate timestamp
      run: |
        echo "TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        
    - name: Create data directory if it doesn't exist
      run: |
        mkdir -p webapp/frontend/public/data
        
    - name: Update data timestamp
      run: |
        echo "{\"lastUpdated\": \"$TIMESTAMP\", \"source\": \"github-actions\"}" > webapp/frontend/public/data/last-update.json

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: webapp/frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd webapp/frontend
        npm ci

    - name: Build frontend
      run: |
        cd webapp/frontend
        npm run build

    - name: Commit and push updated data
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add webapp/frontend/public/data/
        git diff --staged --quiet || git commit -m "Update MISP dashboard data - $TIMESTAMP"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./webapp/frontend/dist

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4